package kr.hoon.project.service;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.util.List;
import java.util.Random;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.FileCopyUtils;

import kr.hoon.project.vo.file.FileBucket;
import kr.hoon.project.vo.file.FileVO;
import kr.hoon.project.vo.file.MultiFileBucket;
import kr.hoon.project.vo.notice.NoticeDAO;
import kr.hoon.project.vo.notice.NoticePaging;
import kr.hoon.project.vo.notice.NoticeVO;

@Service
public class BoardService {
	
	@Autowired
	private NoticeDAO noticeDAO;
	
	//리스트 가져오기
	public NoticePaging<NoticeVO> noticelist(int currentPage,int pageSize,int blockSize){
		NoticePaging<NoticeVO> paging =null;
		int totalCount = noticeDAO.getCount();
		paging = new NoticePaging<NoticeVO>(totalCount, currentPage, pageSize, blockSize);
		if(paging.getTotalCount()>0) {	
			System.out.println(paging.getStartNo()+","+paging.getEndNo());
			List<NoticeVO> list = noticeDAO.selectList(paging.getStartNo(), paging.getEndNo());
			paging.setLists(list);
		}
		return paging;
	}
	
	//공지사항 쿠키메서드
	public void noticeCookie( HttpServletRequest request,HttpServletResponse response ,int idx, int mode) {
		Cookie[] cookies = request.getCookies();
		boolean isRead = false;
		System.out.println(cookies.length);
		
		if(cookies!=null && cookies.length>0){
			for(Cookie cookie : cookies){
				
				System.out.println(cookie.getName());
				if(("notice"+idx).equals(cookie.getName())){
					isRead = true;
					break;
				}
			}
		}
		System.out.println(isRead);
		if(isRead){
			// 저장되어 있으면 이미 글을 본적이 있다 --- 조회수 증가시키지 않는다
			mode = 0;		
		}else{
			// 저장되어있지 않으면 조회수를 증가시키고 글번호를 쿠키로 저장해준다.
			mode = 1;
			Cookie cookie = new Cookie("notice" + idx, "notice" + idx);
			cookie.setMaxAge(7*60*60*24); // 7일동안 저장
			response.addCookie(cookie);
		}
		if(mode==1) {
			noticeDAO.hitupdate(idx);
		}
	}
	
	//view보이기
	public NoticeVO noticeView(int idx, int mode) {
		NoticeVO vo =null;
		vo = noticeDAO.selectbyidx(idx);

		return vo;
	}
	// view에 보이기
	public FileVO noticeDownList(int idx) {
		return noticeDAO.noticefileload(idx);
	}
	
	// 공지사항 글저장, 파일저장, 체크에 등록
	public void noticeInsert(NoticeVO vo , MultiFileBucket multiFileBucket, HttpServletRequest request) {
		noticeDAO.insert(vo);
		int board_idx = noticeDAO.maxgetIdx();
		noticeDAO.noticeCheckInsert(vo.getId_emp(), request.getRemoteAddr(),board_idx);
		if(multiFileBucket!=null) {
			System.out.println("********************************");
			System.out.println("multiFileBucket:"+multiFileBucket+"getFileBucket:"+multiFileBucket.getFiles());
			System.out.println("********************************");
			for(FileBucket bucket : multiFileBucket.getFiles()){
				System.out.println(bucket.getFile());
				if(multiFileBucket.getFiles()!=null) {
					FileVO dto = new FileVO();
					String oriFile = bucket.getFile().getOriginalFilename();

					// 파일 형식을 비교하여 원하는 데이터만 업로드 가능하게 할 수 있다.
					String makeFileName = System.nanoTime()+"_"+new Random().nextInt(1000);
					String saveFile = request.getRealPath("/upload/") + makeFileName;
					if(oriFile!=null && oriFile.trim().length()>0) {
						try {
							FileCopyUtils.copy(bucket.getFile().getBytes(), new File(saveFile));
						} catch (IOException e) {
							System.out.println("이름에서 에러!");
						}
						dto.setBoard_idx(board_idx);
						dto.setOfile(oriFile);
						dto.setSfile(makeFileName);
						noticeDAO.noticeFileinsert(dto);
					}
				}
			}
		}else {
			;
			}	
	}
	
	// 공지사항 다운받기
	public void noticedown(HttpServletRequest request, HttpServletResponse response) {
		String path = request.getRealPath("/upload/");
		String oFile = request.getParameter("o");
		String sFile = request.getParameter("s");
		

	    InputStream in = null;
	    OutputStream os = null;
	    File file = null;
	    boolean skip = false; // 존재하지않는 파일일경우 패스
	    String client = "";
	    try{
	        // 파일을 읽어 스트림에 담기
	        try{
	            file = new File(path, sFile);
	            System.out.println(file.getPath());
	            System.out.println(file.getAbsolutePath());
	            System.out.println(file.length());
	            in = new FileInputStream(file);
	            System.out.println(in.toString().length());
	        }catch(FileNotFoundException fe){
	            skip = true;
	        }
			// 브라우져 종류         
	        client = request.getHeader("User-Agent");

	        // 파일 다운로드 헤더 지정
	        response.reset();
	        response.setContentType("application/octet-stream"); // 핸제 데이터가 스트림이다라고 알려준다.
	        // response.setHeader("Content-Description", "JSP Generated Data");
	        System.out.println(skip);
	        if(!skip){ // 파일이 존재 한다면
	            // 한글 파일명 처리
	            if(client.indexOf("Trident")==-1){
	            	oFile = new String(oFile.getBytes("utf-8"),"iso-8859-1");
	            }else{
	            	oFile = URLEncoder.encode(oFile, "UTF-8" ).replaceAll("\\+","%20" );
	            }
	            response.setHeader("Content-Disposition", "attachment; filename=\"" + oFile + "\"");
	            response.setHeader("Content-Type", "application/octet-stream; charset=utf-8");
	            response.setHeader ("Content-Length", ""+file.length() );
				
	            // 출력스트림 얻기
				// getOutputStream() has already been called for this response - error!!!
				// JSP에서는 SERVLET으로 변환될 때 내부적으로 out 객체가 자동으로 생성하기 때문에 
				// out객체를 만들면 충돌이 일어나서 저런 메시지가 뜨는 것이다.
				// 그래서 먼저 out를 초기화하고 생성하면 된다.
				//out.clear();
				//out = pageContext.pushBody();
	            
				os = response.getOutputStream();
				System.out.println(os.toString().length());
				// 복사
				byte b[] = new byte[(int)file.length()]; // 파일 크기만큼 배열선언
	            int leng = 0;
	            while( (leng = in.read(b)) > 0 ){ // 읽기
	                os.write(b,0,leng); // 쓰기
	                os.flush();
	            }
	        }
	        in.close();
	        os.close();
	    }catch(Exception e){
	      e.printStackTrace();
	    }
	}
	
	public void noticeDelete(int idx,String ip,int Id_emp) {
		noticeDAO.noticedelete(idx);
		noticeDAO.noticeCheckDelete(Id_emp, ip, idx);
	}
	
	public NoticeVO noticeselectbyidx(int idx) {
		return noticeDAO.selectbyidx(idx);
	}
	
}
